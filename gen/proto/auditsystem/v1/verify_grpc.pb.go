// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/auditsystem/v1/verify.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImageAuditService_PutImage_FullMethodName = "/auditsystem.v1.ImageAuditService/PutImage"
)

// ImageAuditServiceClient is the client API for ImageAuditService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageAuditServiceClient interface {
	PutImage(ctx context.Context, in *PutImageRequest, opts ...grpc.CallOption) (*PutImageResponse, error)
}

type imageAuditServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageAuditServiceClient(cc grpc.ClientConnInterface) ImageAuditServiceClient {
	return &imageAuditServiceClient{cc}
}

func (c *imageAuditServiceClient) PutImage(ctx context.Context, in *PutImageRequest, opts ...grpc.CallOption) (*PutImageResponse, error) {
	out := new(PutImageResponse)
	err := c.cc.Invoke(ctx, ImageAuditService_PutImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageAuditServiceServer is the server API for ImageAuditService service.
// All implementations must embed UnimplementedImageAuditServiceServer
// for forward compatibility
type ImageAuditServiceServer interface {
	PutImage(context.Context, *PutImageRequest) (*PutImageResponse, error)
	mustEmbedUnimplementedImageAuditServiceServer()
}

// UnimplementedImageAuditServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImageAuditServiceServer struct {
}

func (UnimplementedImageAuditServiceServer) PutImage(context.Context, *PutImageRequest) (*PutImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutImage not implemented")
}
func (UnimplementedImageAuditServiceServer) mustEmbedUnimplementedImageAuditServiceServer() {}

// UnsafeImageAuditServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageAuditServiceServer will
// result in compilation errors.
type UnsafeImageAuditServiceServer interface {
	mustEmbedUnimplementedImageAuditServiceServer()
}

func RegisterImageAuditServiceServer(s grpc.ServiceRegistrar, srv ImageAuditServiceServer) {
	s.RegisterService(&ImageAuditService_ServiceDesc, srv)
}

func _ImageAuditService_PutImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageAuditServiceServer).PutImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageAuditService_PutImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageAuditServiceServer).PutImage(ctx, req.(*PutImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageAuditService_ServiceDesc is the grpc.ServiceDesc for ImageAuditService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageAuditService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auditsystem.v1.ImageAuditService",
	HandlerType: (*ImageAuditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutImage",
			Handler:    _ImageAuditService_PutImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auditsystem/v1/verify.proto",
}
